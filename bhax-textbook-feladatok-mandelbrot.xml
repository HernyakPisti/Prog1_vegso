<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/MxnajxZvuGE">https://youtu.be/MxnajxZvuGE</link>
        </para>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/HernyakPisti/Prog1_vegso/tree/master/mandel">https://github.com/HernyakPisti/Prog1_vegso/tree/master/mandel</link>            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ez a halmaz Benoit B. Mandelbrot, lengyel származású matematikusról, a megalkotójától kapta a nevét. Úgy építhető fel ez a halmaz ha a komlpex számsíkon veszünk egy C pontot és erre képezzük a következő rekurzív sorozatot:
                <mediaobject>
                <imageobject>
                    <imagedata fileref="mandel/halmaz.png" scale="50" />
                </imageobject>
            </mediaobject>
        </para> 
        <para>
            Ezzel az egyszerű rekurzióval definiált sorozatról be lehet bizonyítani, hogy bizonyos C számok választása esetében végtelenbe tart, vagy más C-k esetében pedig nullához tart. Más eset nem lehetséges.
        </para><para>
        A Mandelbrot-halmaznak azok és csak azok a C komplex számok az elemei, amelyek esetében a fenti sorozat nullához tart. Ábrázolás esetében ezeket általában feketére szokták festeni, míg a többi pontot attól függően, hogy "milyen gyorsan" tart a végtelenbe.</para>
        <para>
            Most hogy megismertük a Mandelbrot halmazt, készítsük mi is el egy ábrát róla, ehhez használjuk a következő kódot.
        </para>
        <programlisting language="c"><![CDATA[
            #include <iostream>
#include "png++/png.hpp"
#include <sys/times.h>

#define MERET 600
#define ITER_HAT 32000

void
mandel (int kepadat[MERET][MERET]) {

    // Mérünk időt (PP 64)
    clock_t delta = clock ();
    // Mérünk időt (PP 66)
    struct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);

    // számítás adatai
    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

    // a számítás
    float dx = (b - a) / szelesseg;
    float dy = (d - c) / magassag;
    float reC, imC, reZ, imZ, ujreZ, ujimZ;
    // Hány iterációt csináltunk?
    int iteracio = 0;
    // Végigzongorázzuk a szélesség x magasság rácsot:
    for (int j = 0; j < magassag; ++j)
    {
        //sor = j;
        for (int k = 0; k < szelesseg; ++k)
        {
            // c = (reC, imC) a rács csomópontjainak
            // megfelelő komplex szám
            reC = a + k * dx;
            imC = d - j * dy;
            // z_0 = 0 = (reZ, imZ)
            reZ = 0;
            imZ = 0;
            iteracio = 0;
            // z_{n+1} = z_n * z_n + c iterációk
            // számítása, amíg |z_n| < 2 vagy még
            // nem értük el a 255 iterációt, ha
            // viszont elértük, akkor úgy vesszük,
            // hogy a kiinduláci c komplex számra
            // az iteráció konvergens, azaz a c a
            // Mandelbrot halmaz eleme
            while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
                // z_{n+1} = z_n * z_n + c
                ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kepadat[j][k] = iteracio;
        }
    }

    times (&tmsbuf2);
    std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
              + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

    delta = clock () - delta;
    std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}

int
main (int argc, char *argv[])
{

    if (argc != 2)
    {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

    int kepadat[MERET][MERET];

    mandel(kepadat);

    png::image < png::rgb_pixel > kep (MERET, MERET);

    for (int j = 0; j < MERET; ++j)
    {
        //sor = j;
        for (int k = 0; k < MERET; ++k)
        {
            kep.set_pixel (k, j,
                           png::rgb_pixel (255 -
                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                           (255 * kepadat[j][k]) / ITER_HAT));
        }
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;

}]]></programlisting>
<para>
    Az alábbi kód Bátfai Norbert-től van.
</para>
<para>
    A kód fordítása a "g++ mandelpngt.c++ -o mandelpng" paranccsal történik és futtatása pedig a "./mandelpng fájlnév" a fáljnév lesz az a név amit a kimeneti png fog névként kapni.
</para>
<para>
    A kód két függvényből áll, a main-ből és mandel-ből. A mandel függvény elején változókat vezetünk be amikkel majd az időt fogjuk mérni, majd ezután a szükséges változóknak megadjuk az értékeket amiket még a kód legelején definiáltunk. Ezután lebegőpontos típusú változókkal történik a számlálás.
</para>
<para>
    Ezután jön mag a számítás, ezt két egymásba ágyazott for ciklussal és egy while ciklussal tesszük. A két for ciklus felel azért hogy minden rácson átmenjünk. A while ciklusban történik a rekurzív számolás, ebből a ciklusból való kilépést biztosítja az iteracio változó.
</para>
<para>
    Ha befejeztük a számítás akkor a ciklus után kiszámoljuk az eltelt időt amit megjelenítünk a terminálon. Ezután következik a main függvény.
</para>
<para>
    A main egyből egy hibakezeléssel indul, hogyha a felhasználó rosszul használná a programot akkor egy üzenet segít neki és a program visszatér -1 értékkel és leáll.
</para>
<para>
    Ha a felhasználó jól használja a programot akkor a mainben létrejön egy kepadat nevű mátrix amit egyből át is adunk a mandel függvényben ahol megtörténik a Mandelbrot halmaz kiszámítása.
</para>
<para>
    Ami után visszatér a vezénylés a mandel függvénytől a main-nek létrehozzuk a kep változót amit majd legenerálunk, a képet pixelről pixelre szinezzük ki két egymásba ágyazott for ciklussal, majd ha kész a kép a terminálra kiírjuk a megadott fáljnévvel a mentve-t és a program leáll.
</para>
<para>
    A Mandelbrotról lehetne hosszabban is írni de hiába tanultam emelt szintű matematikát nem hiszem hogy képes lennék többet magyarázni, inkább átadom magam annak az élvezetnek hogy egyre jobban belemélyedek milyen alakzatokra képes a halmaz.
</para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/MxnajxZvuGE">https://youtu.be/MxnajxZvuGE</link>
        </para>
        <para>
            Megoldás forrása:     <link xlink:href="https://github.com/HernyakPisti/Prog1_vegso/tree/master/mandel">https://github.com/HernyakPisti/Prog1_vegso/tree/master/mandel</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        <programlisting language="c"><![CDATA[
            #include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]></programlisting>
<para>Az alábbi kód Bátfai Norbert-től van.</para>
<para>Ebben a feladatban ugyan az a feladat mint az előzőben csak itt annyi a könnyítésünk hogy a kódban nem lebegőpontos változókkal dolgozunk hanem komplex számokkal ezzel elérve azt hogy az előző küdban használt külön függvényt elhagyhassuk.</para>
<para>A kód fordításához használjuk a "g++ 3.1.2.cpp -lpng -o 3.1.2" parancsot és a futtatásnál pedig "./3.1.2 fájlnév szélesség magasság n a b c d" parancsot. A fájlnév az a név amit a generált kép fog kapni, a többi megadott szám pedig vagy a kép méretei vagy pedig a számításhoz szükséges adatok.</para>
<para>A kód elején itt is egy hibakezelés van, hogyha nem megfelelő mennyiségű bemeneti adatot adunk meg akkor a program kiírja hogy mi a megfelelő bemenet és -1 értékkel leáll, azonban ha megfeleő mennyiségű bemenetet adunk meg akkor a program elkezdi számítani a megadott értékkel a halmazt.</para>
<para>Az összetett számítás miatt a terminálon mindig olvasható a számítás állapota %-ra lebontva</para>
<para>A számolás itt is két egymásba ágyazott for ciklussal és egy while ciklussal történik. A for ciklusok itt is azért vannak hogy minden sor minden oszlop cellájába elmenjünk, míg a while ciklusban történik maga a számolás.</para>
<para>A cikluson belül közben folyamatosan készül a kép színezése is, és ha kész van minden akkor a program erről értesít minket és leáll.</para>
<para>Ez a feladat és az előző egy remek példa arra hogy mindenre létezik több megoldás is de vannak olyakos sokkal könnyebb utak is, ilyen másik példa mint amikor a lexert használtuk hogy helyettünk írjon meg több 100 oldalnyi kódot csupán 20-40 sor alapján.</para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            Passz!
        </para>                        
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/HernyakPisti/Prog1_vegso/tree/master/mandel">https://github.com/HernyakPisti/Prog1_vegso/tree/master/mandel</link> 
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/MxnajxZvuGE">https://youtu.be/MxnajxZvuGE</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...</para>
<para>
Ebben a feladatban egy külső program segítségével készítjük el a nekünk szükséges programokat a forrásainkból.
</para>
<para>Ahhoz hogy működjön a programunk elsőnek telepítenünk kell a QT szoftver. Hogyha ez megvan akkor a QT-beli qmake parancs használtavál elkészítünk egy make file-t a forrásainkból ami általl kapunk is egy kész futtatható fáljt, amit ha futtatunk felugrik egy interaktív ablak amibe kijelöléssel tudunk nagyítani.</para>
<para>A feladat futtatásához a terminálba a következő parancsokat kell beírni. "qmake frak.pro" (ezáltal elkészül a make file-unk), "make" (ezáltal elkészül az egész program aminek a végeredménye egy már futtatható file) "./frak" paranccsal felugrik az interaktív ablak.</para>
<para>Ebben az interaktív ablakban tudunk egyre jobban belenagyítani a képbe, ami minden nagyítás után újra számolódik egy kis elcsússzással a kijelöléshez képest.
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
    </section>

</chapter>                
