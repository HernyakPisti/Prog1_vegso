<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
           Saját megoldás videó:<link xlink:href="https://youtu.be/2kQEw_1BLFM">https://youtu.be/2kQEw_1BLFM</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing">https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...</para>
	<programlisting language="c"><![CDATA[
int main(){
for (;;){}
return 0;
}
}]]></programlisting><para>
Az alábbi kód egy magot fog futtatni 100%-on. A kód fordításához a "gcc inf-100.c -o 100" parancsot használjuk majd "./100" paranccsal futtatjuk. A futtatás alatt azt szeretnénk elérni hogy egy mag állandóan 100%-on fusson vagy ahhoz nagyon közel, hogy ezt leellenőrizzük nyissunk meg egy másik terminált és a "top" paranccsal figyeljük meg hogy mi történt.
</para>
<programlisting language="c"><![CDATA[
#include <unistd.h>
int main(){
	for (;;){
	sleep(1);
	}
return 0;
}
}]]></programlisting><para>
Az alábbi kód egy magot fog 0%-on futtatni. A kód fordításához a "gcc inf-0.c -o 0" parancsot használjuk majd a "./0" paranccsal futtatjuk. A futtatás alatt azt szeretnénk elérni hogy egy map állandóan 0%-on fusson. Ha ezt szeretnénk leellenőrizni a "top" paranccsal akkor sajnos nem látunk semmi változást mivel sok más program fut így a mi programunk nem jelenik meg.</para>
<programlisting language="c"><![CDATA[
#include <unistd.h>
#include <omp.h>

int main(){
	#pragma omp parallel
	while(1){
	}
	return 0;
}
}]]></programlisting><para>
Az utolsó kód a feladatban arra törekszik hogy minden magot 100%-on futtasson. A kód fordításához a "gcc inf-all.c -o all -fopenmp" parancsot kell használni. A futtatáshoz "./all" parancsot használjuk. A "-fopenmp" kapcsolót a "#pragma omp parallel" sor miatt használjuk ami ahhoz kell hogy az összes magot párhuzamosan tudjuk használni. Egy másik terminálban futtatott "top" paranccsel ellenőrizhetjük hogy a program minden szálat 100%-on futtat vagy ahhoz nagyon közel.
</para><para>
Minden kód alapja egy végtelen ciklus, mivel nem adjuk meg meddig fusson a kód ezért a ciklusunk végtelen. Erre két példát is használunk a "for(;;)" és a "while(1)". Mindkettő egy végtelen ciklus míg a while-lal írt könnyebben olvasható addig a for-ral írt egyszerűbb. 
 </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
            Saját megoldás videó:<link xlink:href="https://youtu.be/2kQEw_1BLFM">https://youtu.be/2kQEw_1BLFM</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing">https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
<programlisting language="c"><![CDATA[
#include <stdio.h>

int main(){
	int a=10;
	int b=20;
	printf("Eredeti: a=%d, b=%d.\n", a,b);

	int temp = 0;
	temp=a;
	a=b;
	b=temp; 	
	printf("Segédes változás: a=%d, b=%d.\n", a,b);	
	       //a=20, b=10
	b=b-a; //b=10-20=-10 a=20
	a=a+b; //a=20+(-10)=10 b=-10
	b=a-b; //b=10-(-10)=20 a=10
	printf("Matoperátos változás: a=%d, b=%d.\n", a,b);

	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("XOR operátoros változás: a=%d, b=%d.\n", a,b);

	return 0;
}
}]]></programlisting> 
A kód fordításához a "gcc váltcsere.c -o csere" parancsot használjuk, a futtatáshoz pedig "./csere". Ha lefordítjuk és futtatjuk a kódot akkor hirtelen végig szalad a kód és nem tudjuk mitörtént csak cserélgetünk 2 számot.
</para><para>
A legelső cserélés egy egyszerű segéd változóval történik. Az az létrehozunk egy temp nevű változót, amibe eltároljuk az a-t majd az a-t egyenlővé tesszük b-vel és a végén b-t egyenlővé tesszük a temp-pel. Ez egy egyszerű változó csere amit elég könnyű végig követni, hátránya az hogy külön memória hely kell a temp változónak.
</para><para>
A második cserélés a matematikával történik meg. Egyszerű összeadás kivonás. A b-t egyenlővé tesszük b-a-val, a-t egyenlővé tesszük az a+b összeggel majd a b-t egyenlővé tesszük a-b-vel.
Hogy tudjuk végigkövetni hol mennyi a változók értékének egyszerűen kikommentelve írjuk fel hogy mikor mennyi az értékük.
</para><para>
A harmadik cserélés az XOR opetárt használja. Az első sorban kombináljuk az a-t és a b-t a XOR segítségével ezzel megkapjuk az a+b-t és ezt letároljuk az a-ban. A második sorban az összeget XOR-ral kombináljuk b-vel amibel kiszürjük a b-t így megkapjuk az a-t és ezt letároljuk az b-ben. Mivel még az a-ban az összeg van letárolva így megint kombináljuk az összeget b-vel (az összeg még mindig a-ban van letárolva) így kiszürjük az eredeti a értéket mivel az eredeti a érték már b-ben van így megkapva az eredeti b-t amit letárolunk a-ba. Ezzel kész a csere. Innen látszik hogy a XOR jó mód információ tárolásra mivel bármikor eltudjuk tüntetni az XOR-t ha mégegyszer használjuk az XOR-t.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
            Saját megoldás videó:<link xlink:href="https://youtu.be/2kQEw_1BLFM">https://youtu.be/2kQEw_1BLFM</link>
</para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/HernyakPisti/Prog1/tree/master/bhax/thematic_tutorials/bhax_textbook/turing">https://github.com/HernyakPisti/Prog1/tree/master/bhax/thematic_tutorials/bhax_textbook/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int sz=10,m=10,a=1,b=1;
#define SZG 50
#define MG 20
int falsz[SZG];
int falm[MG];
void palya(){
system("clear");
for (int i=0;i<(SZG+2);i++) 
	printf("X");
	printf("\n");
for (int i=0;i<m;i++){ 
	printf("X");
		for (int j=1;j<(SZG+1);j++)
		printf(" ");
	printf("X\n");
}		
printf("X");	
for (int i=0;i<sz;i++) 
	printf(" ");
printf("X"); 	
for (int i=(sz+1);i<SZG;i++) 
	printf(" ");
printf("X\n"); 
for (int i=m+1;i<MG;i++){ 
	printf("X");
		for (int j=1;j<(SZG+1);j++)
		printf(" ");
	printf("X\n");
}		
for (int i=0;i<(SZG+2);i++) 
	printf("X");
	printf("\n");
}
void mozdulj(){
sz=sz+a; 
m=m+b; 
a=a*falsz[sz]; 
b=b*falm[m]; /
}

int main(){

for (int i=1;i<SZG;i++) 
	falsz[i]=1;
for (int i=1;i<MG;i++) 
	falm[i]=1;
falsz[0]=-1; 
falsz[SZG-1]=-1; 
falm[0]=-1; 
falm[MG-1]=-1; 

while(1){
palya();
mozdulj();
usleep(50000); 
}
}
}]]></programlisting>
A programot a "gcc pattogifnelkull.c -o pattog" paranccsal fordítjuk le, majd "./pattog" paranccsal futtatjuk. A kód összetettebb, mivel több függvény is szerepel benne.
Kezdjük a main-nel:</para>
<programlisting language="c"><![CDATA[
int main(){

for (int i=1;i<SZG;i++) 
	falsz[i]=1;
for (int i=1;i<MG;i++) 
	falm[i]=1;
falsz[0]=-1; 
falsz[SZG-1]=-1; 
falm[0]=-1; 
falm[MG-1]=-1; 

while(1){
palya();
mozdulj();
usleep(50000); 
}
]]></programlisting> <para>
A main-ben két for ciklus van amik úgy néznek ki mint amik tömböket töltenek fel csupa 1-sel. A kód ezeket használja majd hogy meghatározza a labda helyzetét. A ciklusok utáni 4 sorban pedig a falakat látjuk ahol a labdának irányt kell változtatni ezért az ott lévő értékeket átírjuk -1-re. Ezután pedig jön egy végtelen ciklus amiben 2 új függvény szerepel a palya és a mozdulj, ezekről később lesz szó. Az usleep pedig egy egyszerű késleltetés arra hogy a labdának nyomon lehessen követni az útvonalát.
Térjünk át a palya függvényre és az előtte lévő sorokra:</para>
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int sz=10,m=10,a=1,b=1;
#define SZG 50
#define MG 20
int falsz[SZG];
int falm[MG];
void palya(){
system("clear");
for (int i=0;i<(SZG+2);i++) 
	printf("X");
	printf("\n");
for (int i=0;i<m;i++){ 
	printf("X");
		for (int j=1;j<(SZG+1);j++)
		printf(" ");
	printf("X\n");
}		
printf("X");	
for (int i=0;i<sz;i++) 
	printf(" ");
printf("X"); 	
for (int i=(sz+1);i<SZG;i++) 
	printf(" ");
printf("X\n"); 
for (int i=m+1;i<MG;i++){ 
	printf("X");
		for (int j=1;j<(SZG+1);j++)
		printf(" ");
	printf("X\n");
}		
for (int i=0;i<(SZG+2);i++) 
	printf("X");
	printf("\n");
}
]]></programlisting> <para>
A kód a szokásos include-okkal kezdődik. Ezután 4 változót vezetünk be, sz ami a szélességet jelenti ahonnan a labda indul majd, m ami a magasságot jelenti ahonnan a labda indul majd, valamint van a és b változó amik a labdairányát jelölik majd. Ezután két konstans következik az SZG és az MG ezek jelölik a pálya méretét. Ezután létrehozzuk a két tömböt amiket majd azt tároljuk hogy a labda falnál van-e vagy nem, erre 1 és -1 használjuk.
</para><para>
Ezután következik a palya függvény ami void típusú mivel nincs visszaadott értéke. A függvény egy "system("clear")" paranccsal indul ami letörli a terminált hogy a pálya jól látszódjon. Ezután több for ciklus is van amikkel a pályát rajzoljuk és utána a labdát majd megint a pályát. A kód úgy működik hogy a falakat "X"-ek jelölik. A falak közti terület pedig " " (egyszerű szóközök). A rajzolás pedig úgy történik hogy indulunk mindig az első sortól aztán addig írjuk az "X"-et meg a " "-ök amíg nem kell a labdát leírni. Aztán leírjuk a labdát ami "X" karakter jelöl. Majd ezután befejzzük a pályát.
</para><para>
A kód utolsó része pedig a mozdulj függvény:</para>
<programlisting language="c"><![CDATA[
void mozdulj(){
sz=sz+a; 
m=m+b; 
a=a*falsz[sz]; 
b=b*falm[m]; /
}
]]></programlisting><para>
Ez a függvény is void típusú mivel nincs visszatérő értéke. Ebben a függvényben használjuk az első 4 változót amit bevezettünk. Ezek fogják megszabni hogy a labda milyen X,Y koordinátál áll és milyen irányba kell haladnia. A "sz=sz+a" és "m=m+b" jelenti a koordinátát, az "a=a*falsz[sz]" és a "b=falm[m]" pedig az irányt. Az a és a b értéke vagy 1 vagy -1 ha egy akkor pozitív irányba halad a labda ha -1 akkor negatív irányba.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
           Saját megoldás videó:<link xlink:href="https://youtu.be/2kQEw_1BLFM">https://youtu.be/2kQEw_1BLFM</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing">https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
<programlisting language="c"><![CDATA[
#include <time.h>
#include <stdio.h>

void
delay (unsigned long long loops)
{
  for (unsigned long long i = 0; i < loops; i++);
}

int
main (void)
{
  unsigned long long loops_per_sec = 1;
  unsigned long long ticks;

  printf ("Calibrating delay loop..");
  fflush (stdout);

  while ((loops_per_sec <<= 1))
    {
      ticks = clock ();
      delay (loops_per_sec);
      ticks = clock () - ticks;

      if (ticks >= CLOCKS_PER_SEC)
	{
	  loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

	  printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
		  (loops_per_sec / 5000) % 100);

	  return 0;
	}
    }

  printf ("failed\n");
  return -1;
}
]]></programlisting><para>
Az alábbi kód Bátfai Norbert-től van egy az egyben.
</para><para>
A kód fordításához a "gcc bogomips.c -o bogo" parancsot használjuk a futtatáshoz pedig a "./bogo" parancsot.
</para><para>
A kód arra való hogy megállalítsa a számítógép bogomips értékét, ami úgy írható le hogy milyen erős is az adott számítógép, de nekünk nem is ez a fontos hanem a main függvényben lévő while ciklus fejben.</para>
<programlisting language="c"><![CDATA[
  while ((loops_per_sec <<= 1))
]]></programlisting><para>
Erről a while ciklusról van szó amiben van egy bit shiftelő operátor van ami csak annyit tesz hogy az int-ben tárolt számot bitenként lépteti. Másszóval mindig a 2 hatványát adja meg.
</para><para>
Ezt a while ciklus fejet használjuk arra is hogy megtudjuk a bit hosszát:</para>
<programlisting language="c"><![CDATA[
#include <stdio.h>
int main(){
	int db=1;
	int szo=1;

	while(szo <<= 1){
	db++;
	//printf("%d\n",szo);
	}
printf("Szóhossz: %d bit\n",db);
return 0;
}]]></programlisting><para>
A kódot a "gcc szohosz.c -o szo" paranccsal fordítjuk majd a "./szo" paranccsal futtatjuk.
</para><para>
A kód egy egyszerű main függvényből áll amiben egyből deklaráunk 2 változóz a db és a szo változót. A db fogja jelölni hogy hányszor futt le a lentebb lévő while ciklus a szo pedig egy egyszerű int amit a while ciklus fejben használunk amiben léptetjük a bitet. A ciklus lefutása után pedig kiírjuk a db változó értékét, ami 32 lesz, ezzel megtudva azt hogy a bit hossza a számítógépen 32 bit.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
           Saját megoldás videó:<link xlink:href="https://youtu.be/2kQEw_1BLFM">https://youtu.be/2kQEw_1BLFM</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing">https://github.com/HernyakPisti/Prog1-vegso-/tree/master/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <math.h>

void kiir(double tomb[], int db){
    
    for (int i=0; i<db;i++)
        printf("%f\n", tomb[i]);
}

double tavolsag(double PR[], double PRv[], int db){
    
    double osszeg=0.0;
    for (int i=0; i<db; i++)
        osszeg += (PRv[i]-PR[i])*(PRv[i]-PR[i]);
    
    return sqrt(osszeg);
}

int main(){
    
    double L[4][4]=
    {
        {0.0, 0.0, 1.0/3.0, 0.0},
        {1.0, 1.0/2.0, 1.0/3.0, 1.0},
        {0.0, 1.0/2.0, 0.0, 0.0},
        {0.0, 0.0, 1.0/3.0, 0.0}
    };
    
    double PRv[4] ={1.0/4.0, 1.0/4.0,1.0/4.0,1.0/4.0};
    double PR[4] ={0.0, 0.0, 0.0, 0.0};

    int i,j;
    
    for(;;){
        
        for(i=0;i<4;i++){
            PR[i] = 0.0;
            for(j=0;j<4;j++)
                PR[i]+=(L[i][j]*PRv[j]);
        }
        if (tavolsag(PR,PRv,4)<0.00000001)
            break;
        for(i=0; i<4;i++)
            PRv[i]=PR[i];
    }
    kiir(PR,4);
    return 0;
}
]]></programlisting><para>
A kódot a "gcc pagerank.c -o page -lm" paranccsal fordítjuk és a "./page" paranccsal futtatjuk. A -lm kapcsoló az sqrt függvény miatt kell.
</para><para>
A program feladata hogy egy 4 honlapból álló hálózatra kiszámolja az adott 4 lap PageRank értékét. A PageRank még a Google alapítói is használták kezdetben. Az elgondolás az az volt hogy annál jobb egy honlap ha arra minnél több jó értékelésű honlap mutat.
</para><para>
A kód itt is több függvényből áll ezért kezdjük megint a main-nel:</para>
<programlisting language="c"><![CDATA[
int main(){
    
    double L[4][4]=
    {
        {0.0, 0.0, 1.0/3.0, 0.0},
        {1.0, 1.0/2.0, 1.0/3.0, 1.0},
        {0.0, 1.0/2.0, 0.0, 0.0},
        {0.0, 0.0, 1.0/3.0, 0.0}
    };
    
    double PRv[4] ={1.0/4.0, 1.0/4.0,1.0/4.0,1.0/4.0};
    double PR[4] ={0.0, 0.0, 0.0, 0.0};

    int i,j;
    
    for(;;){
        
        for(i=0;i<4;i++){
            PR[i] = 0.0;
            for(j=0;j<4;j++)
                PR[i]+=(L[i][j]*PRv[j]);
        }
        if (tavolsag(PR,PRv,4)<0.00000001)
            break;
        for(i=0; i<4;i++)
            PRv[i]=PR[i];
    }
    kiir(PR,4);
    return 0;
}
]]></programlisting>
<para>
A mainben létrehozunk egy double típusú link mátrixot L néven. Ezután még másik 2 double típusú tömböt hozunk létre PRv és PR néven. Az eddigi adatok mind a feladatból lettek kinézve. Ezután deklarálunk 2 változót i és j-t amiket majd ciklusokban használunk. Ezután jön egy többszörösen összetett for ciklus sorozat. Az első for ciklus egy egyszerű végtelen ciklus, mivel a PageRanket nem elég egyszer kiszámolni hanem többször kell.
</para><para>
A második for ciklus gyorsan feltöltjük 0.0-val a PR tömbböt mivel mindig üres tömb kell a számoláshoz és pár sorral lentebb a PR tömböt feltöltjük más számokkal amiket mindig le kell nullázni ezért kell mindig újra nullázni.
</para><para>A harmadik for ciklusban történik egy egyszerű mátrix szorzás. Amit a végtelen ciklusból való kilépésért felelős if követ. Az if azt vizsgálja hogy a tavolsag függvény visszaadott értéke elég kicsi-e ahhoz hogy kilépjen-e a végtelen ciklusból ha igen akkor áttér a kiir függvényre és véget ér a program de ha nem akkor jön a negyedik for ciklus amia PRv-be másolja a PR értékeit, majd kezdődik az egész ciklus újra.
</para><para>
Nézzük meg a két függvényt is:
</para>
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <math.h>

void kiir(double tomb[], int db){
    
    for (int i=0; i<db;i++)
        printf("%f\n", tomb[i]);
}

double tavolsag(double PR[], double PRv[], int db){
    
    double osszeg=0.0;
    for (int i=0; i<db; i++)
        osszeg += (PRv[i]-PR[i])*(PRv[i]-PR[i]);
    
    return sqrt(osszeg);
}
]]></programlisting>
<para>
A kód elején egy új include van a math.h. Ez az sqrt függvény miatt szükséges. Az első függvény ami szerepel az a kiír. Ez egy void típusú függvény mivel nincs visszatérési értéke, csak arra szolgál hogyha a végtelen ciklusból kiléptünk akkor a végső értékeket kiírja egy printf-el
</para><para>
A második függvény egy double típusú mivel a visszatérése egy sqrt függvényből jön. Ezzel a függvénnyel vizsgáljuk azt hogy a PageRankek között elég kicsi-e már az eltérés mert ha elég kicsi lesz akkor már nem kell tovább számolni és megkaptuk a végső PageRank értékeket.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

</chapter>                
